"""Core tests

"""

import pytest
from contextlib import nullcontext as does_not_raise
from tests.conftest import DATDIR, TMPDIR, remove_dir

import numpy as np

from mysca.io import load_msa
from mysca.mappings import SymMap
from mysca.preprocess import preprocess_msa
from mysca.core import run_sca
# from mysca.helpers import map_msa_positions_to_sequence


#####################
##  Configuration  ##
#####################

TEST_MSA5 = f"{DATDIR}/msas/msa05.faa"
TEST_MSA6 = f"{DATDIR}/msas/msa06.faa"
TEST_MSA7 = f"{DATDIR}/msas/msa07.faa"

SYMMAP5 = SymMap("ABCDEFGH", '-')
BACKGROUND_MAP5 = {
    "A": 1/8,
    "B": 1/8,
    "C": 1/8,
    "D": 1/8,
    "E": 1/8,
    "F": 1/8,
    "G": 1/8,
    "H": 1/8,
}

SYMMAP6 = SymMap("ABCD", '-')
BACKGROUND_MAP6 = {
    "A": 0.25,
    "B": 0.25,
    "C": 0.25,
    "D": 0.25,
}

SYMMAP7 = SymMap("ACDE", '-')
BACKGROUND_MAP7 = {
    "A": 0.25,
    "C": 0.25,
    "D": 0.25,
    "E": 0.25,
}


LAMBDA1 = 0.03

###############################################################################
###############################   BEGIN TESTS   ###############################
###############################################################################

@pytest.mark.parametrize(
        "fa_fpath, symmap, " \
        "gap_truncation_thresh, sequence_gap_thresh, " \
        "reference_id, reference_similarity_thresh, " \
        "sequence_similarity_thresh, position_gap_thresh, " \
        "background_map, regularization, " \
        "expected_results", [
    # Test MSA: msa06.faa
    [
        TEST_MSA6, SYMMAP6,
        0.4, 0.2, 
        "msa06_sequence0", 0.2, 
        0.8, 0.2,
        BACKGROUND_MAP6, LAMBDA1,
        {
            "fi0": [0, 0, 0, 0, 0],
            "fia": np.array([
                [0.457386139, 0.178871287, 0.178871287, 0.178871287],
                [0.006, 0.476594059, 0.313326733, 0.198079208],
                [0.159663366, 0.159663366, 0.476594059, 0.198079208],
                [0.166066007, 0.134052805, 0.006, 0.687881188],
                [0.006, 0.102039604, 0.134052805, 0.751907591],
            ]),
            "Di": np.array([0.096636564, 0.3097553, 0.118204883, 0.52238543, 0.630603701]),
            "Dia": np.array([
                [0.100661216, 0.014514623, 0.014514623, 0.014514623],
                [0.257595807, 0.119223059, 0.010170043, 0.007566241],
                [0.023978967, 0.023978967, 0.119223059, 0.007566241],
                [0.020531044, 0.040935192, 0.257595807, 0.422611313],
                [0.257595807, 0.070242567, 0.040935192, 0.55350727],
            ]),
            "fijab": np.genfromtxt("tests/_data/test_msa06_fijab.txt").reshape([5,5,4,4])
        },
    ],
    # Test MSA: msa07.faa
    [
        TEST_MSA7, SYMMAP7,
        0.4, 0.6, 
        "msa07_sequence0", 0.2, 
        0.8, 0.2,
        BACKGROUND_MAP7, LAMBDA1,
        {
            "fi0": [0.092735703, 0.185471406, 0.092735703, 0.185471406, 0.185471406],
            "fia": np.array([
                [0.353820711, 0.1934034, 0.11844204, 0.238380216],
                [0.006, 0.335829985, 0.185907264, 0.286355487],
                [0.170914992, 0.286355487, 0.185907264, 0.260868624],
                [0.140930448, 0.006, 0.601193199, 0.065969088],
                [0.006, 0.08096136, 0.541224111, 0.185907264],
            ]),
            "Di": np.array([0.062503348, 0.284389726, 0.018995106, 0.560311, 0.473135715]),
            "Dia": np.array([
                [0.026614074, 0.009036957, 0.053994624, 0.000363874],
                [0.257595807, 0.018398313, 0.011688344, 0.003419621],
                [0.018117296, 0.003419621, 0.011688344, 0.000312037],
                [0.035861065, 0.257595807, 0.27563541, 0.117071369],
                [0.257595807, 0.095516127, 0.192533067, 0.011688344],
            ]),
            "fijab": np.genfromtxt("tests/_data/test_msa07_fijab.txt").reshape([5,5,4,4])
        },
    ],
    # Test MSA: msa05.faa
    [
        TEST_MSA5, SYMMAP5,
        0.4, 0.2, 
        "msa05_sequence1", 0.499, 
        1.0, 0.2,
        BACKGROUND_MAP5, LAMBDA1,
        {
            "fi0": np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
            "fia": np.array([
                [0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.973333333, 0.003333333],
                [0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.973333333, 0.003333333],
                [0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.973333333, 0.003333333],
                [0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.973333333, 0.003333333],
                [0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.973333333, 0.003333333],
                [0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.973333333, 0.003333333],
                [0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.973333333, 0.003333333],
                [0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.973333333, 0.003333333],
                [0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.973333333, 0.003333333],
                [0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.973333333, 0.003333333],
                [0.488333333, 0.003333333, 0.245833333, 0.245833333, 0.003333333, 0.003333333, 0.003333333, 0.003333333],
                [0.003333333, 0.973333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333],
                [0.003333333, 0.973333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333],
                [0.003333333, 0.003333333, 0.973333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333],
                [0.003333333, 0.003333333, 0.973333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333],
                [0.003333333, 0.003333333, 0.003333333, 0.973333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333],
                [0.003333333, 0.003333333, 0.003333333, 0.973333333, 0.003333333, 0.003333333, 0.003333333, 0.003333333],
                [0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.245833333, 0.245833333, 0.488333333, 0.003333333],
                [0.003333333, 0.003333333, 0.003333333, 0.003333333, 0.245833333, 0.488333333, 0.245833333, 0.003333333],
            ]),
            "Di": np.array([
                1.913113904, 1.913113904, 1.913113904, 1.913113904, 1.913113904, 
                1.913113904, 1.913113904, 1.913113904, 1.913113904, 1.913113904, 
                0.937572444, 1.913113904, 1.913113904, 1.913113904, 1.913113904, 
                1.913113904, 1.913113904, 0.937572444, 0.937572444
            ]),
            "Dia": np.array([
                [0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 1.904593605, 0.11767738],
                [0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 1.904593605, 0.11767738],
                [0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 1.904593605, 0.11767738],
                [0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 1.904593605, 0.11767738],
                [0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 1.904593605, 0.11767738],
                [0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 1.904593605, 0.11767738],
                [0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 1.904593605, 0.11767738],
                [0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 1.904593605, 0.11767738],
                [0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 1.904593605, 0.11767738],
                [0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 1.904593605, 0.11767738],
                [0.390909248, 0.11767738, 0.054189847, 0.054189847, 0.11767738, 0.11767738, 0.11767738, 0.11767738],
                [0.11767738, 1.904593605, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738],
                [0.11767738, 1.904593605, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738],
                [0.11767738, 0.11767738, 1.904593605, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738],
                [0.11767738, 0.11767738, 1.904593605, 0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.11767738],
                [0.11767738, 0.11767738, 0.11767738, 1.904593605, 0.11767738, 0.11767738, 0.11767738, 0.11767738],
                [0.11767738, 0.11767738, 0.11767738, 1.904593605, 0.11767738, 0.11767738, 0.11767738, 0.11767738],
                [0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.054189847, 0.054189847, 0.390909248, 0.11767738],
                [0.11767738, 0.11767738, 0.11767738, 0.11767738, 0.054189847, 0.390909248, 0.054189847, 0.11767738],
            ]),
            "fijab": np.genfromtxt("tests/_data/test_msa05_fijab.txt").reshape([19,19,8,8])
        },
    ],

])
def test_run_sca(
    fa_fpath, symmap, 
    gap_truncation_thresh,
    sequence_gap_thresh,
    sequence_similarity_thresh,
    reference_id,
    reference_similarity_thresh, 
    position_gap_thresh,
    background_map,
    regularization,
    expected_results,
):
    
    # Equal background probability distribution if background_map is None
    if background_map is None:
        background_map = {s: 1 / len(symmap.aa2int) for s in symmap.aa2int}
    
    msa_obj, msa_orig, msa_ids_orig, _ = load_msa(
        fa_fpath, format="fasta", mapping=symmap,
    )

    results = preprocess_msa(
        msa_orig, msa_ids_orig, 
        mapping=symmap, 
        gap_truncation_thresh=gap_truncation_thresh,
        sequence_gap_thresh=sequence_gap_thresh,
        reference_id=reference_id,
        reference_similarity_thresh=reference_similarity_thresh,
        sequence_similarity_thresh=sequence_similarity_thresh,
        position_gap_thresh=position_gap_thresh,
        verbosity=2
    )

    msa, xmsa, seqids, weights, fi0, ret_seqs, ret_pos, _ = results

    sca_res = run_sca(
        xmsa, weights, background_map,
        mapping=symmap,
        regularization=regularization,
        return_keys="all",
        pbar=False,
    )

    errors = []
    for key in expected_results:
        print(key)
        if np.shape(expected_results[key]) != np.shape(sca_res[key]):
            msg = f"Shape mismatch in {key}\n"
            msg += f"Expected: {np.shape(expected_results[key])}\n"
            msg += f"Got: {np.shape(sca_res[key])}."
            errors.append(msg)
        if not np.allclose(expected_results[key], sca_res[key]):
            msg = f"Mismatch in {key}\n"
            msg += f"Expected:\n{expected_results[key]}\n"
            msg += f"     Got:\n{sca_res[key]}\n"
            errors.append(msg)
    assert not errors, "Errors occurred:\n{}".format("\n".join(errors))

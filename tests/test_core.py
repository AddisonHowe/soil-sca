"""Core tests

"""

import pytest
from contextlib import nullcontext as does_not_raise
from tests.conftest import DATDIR, TMPDIR, remove_dir

import numpy as np

from mysca.io import load_msa
from mysca.mappings import SymMap
from mysca.preprocess import preprocess_msa
from mysca.core import run_sca


#####################
##  Configuration  ##
#####################

SYMMAP1 = SymMap("ABCD", '-')

BACKGROUND_MAP1 = {
    "A": 0.25,
    "B": 0.25,
    "C": 0.25,
    "D": 0.25,
}

TEST_MSA1 = f"{DATDIR}/msas/msa01.faa"
TEST_MSA2 = f"{DATDIR}/msas/msa02.faa"
TEST_MSA3 = f"{DATDIR}/msas/msa03.faa"
TEST_MSA4 = f"{DATDIR}/msas/msa04.faa"
TEST_MSA5 = f"{DATDIR}/msas/msa05.faa"
TEST_MSA6 = f"{DATDIR}/msas/msa06.faa"


LAMBDA1 = 0.03

###############################################################################
###############################   BEGIN TESTS   ###############################
###############################################################################

@pytest.mark.parametrize(
        "fa_fpath, symmap, " \
        "gap_truncation_thresh, sequence_gap_thresh, " \
        "reference_id, reference_similarity_thresh, " \
        "sequence_similarity_thresh, position_gap_thresh, " \
        "background_map, regularization, " \
        "expected_results", [
    # Test MSA: msa06.faa
    [
        TEST_MSA6, SYMMAP1,
        0.4, 0.2, 
        "msa06_sequence0", 0.2, 
        0.8, 0.2,
        BACKGROUND_MAP1, LAMBDA1,
        {
            "fi0": [0, 0, 0, 0, 0],
            "fia": np.array([
                [0.457386139, 0.178871287, 0.178871287, 0.178871287],
                [0.006, 0.476594059, 0.313326733, 0.198079208],
                [0.159663366, 0.159663366, 0.476594059, 0.198079208],
                [0.166066007, 0.134052805, 0.006, 0.687881188],
                [0.006, 0.102039604, 0.134052805, 0.751907591],
            ]),
            "Dia": np.array([
                [0.100661216, 0.014514623, 0.014514623, 0.014514623],
                [0.257595807, 0.119223059, 0.010170043, 0.007566241],
                [0.023978967, 0.023978967, 0.119223059, 0.007566241],
                [0.020531044, 0.040935192, 0.257595807, 0.422611313],
                [0.257595807, 0.070242567, 0.040935192, 0.55350727],
            ]),
            "fijab": np.array([
                [0.452586139, 0.0012, 0.0012, 0.0012, 0.0012, 0.174071287, 0.0012, 0.0012, 0.0012, 0.0012, 0.174071287, 0.0012, 0.0012, 0.0012, 0.0012, 0.174071287],
                [0.0012, 0.327734653, 0.078031683, 0.049219802, 0.0012, 0.049219802, 0.078031683, 0.049219802, 0.0012, 0.049219802, 0.078031683, 0.049219802, 0.0012, 0.049219802, 0.078031683, 0.049219802],
                [0.039615842, 0.039615842, 0.327734653, 0.049219802, 0.039615842, 0.039615842, 0.049219802, 0.049219802, 0.039615842, 0.039615842, 0.049219802, 0.049219802, 0.039615842, 0.039615842, 0.049219802, 0.049219802],
                [0.161266007, 0.129252805, 0.0012, 0.164467327, 0.0012, 0.0012, 0.0012, 0.174071287, 0.0012, 0.0012, 0.0012, 0.174071287, 0.0012, 0.0012, 0.0012, 0.174071287],
                [0.0012, 0.097239604, 0.129252805, 0.228493729, 0.0012, 0.0012, 0.0012, 0.174071287, 0.0012, 0.0012, 0.0012, 0.174071287, 0.0012, 0.0012, 0.0012, 0.174071287],
                [0.0012, 0.0012, 0.0012, 0.0012, 0.327734653, 0.049219802, 0.049219802, 0.049219802, 0.078031683, 0.078031683, 0.078031683, 0.078031683, 0.049219802, 0.049219802, 0.049219802, 0.049219802],
                [0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.471794059, 0.0012, 0.0012, 0.0012, 0.0012, 0.308526733, 0.0012, 0.0012, 0.0012, 0.0012, 0.193279208],
                [0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.471794059, 0.0012, 0.154863366, 0.154863366, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.193279208],
                [0.0012, 0.0012, 0.0012, 0.0012, 0.161266007, 0.129252805, 0.0012, 0.183675248, 0.0012, 0.0012, 0.0012, 0.308526733, 0.0012, 0.0012, 0.0012, 0.193279208],
                [0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.097239604, 0.129252805, 0.24770165, 0.0012, 0.0012, 0.0012, 0.308526733, 0.0012, 0.0012, 0.0012, 0.193279208],
                [0.039615842, 0.039615842, 0.039615842, 0.039615842, 0.039615842, 0.039615842, 0.039615842, 0.039615842, 0.327734653, 0.049219802, 0.049219802, 0.049219802, 0.049219802, 0.049219802, 0.049219802, 0.049219802],
                [0.0012, 0.0012, 0.154863366, 0.0012, 0.0012, 0.0012, 0.154863366, 0.0012, 0.0012, 0.471794059, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.193279208],
                [0.154863366, 0.0012, 0.0012, 0.0012, 0.0012, 0.154863366, 0.0012, 0.0012, 0.0012, 0.0012, 0.471794059, 0.0012, 0.0012, 0.0012, 0.0012, 0.193279208],
                [0.0012, 0.0012, 0.0012, 0.154863366, 0.0012, 0.0012, 0.0012, 0.154863366, 0.161266007, 0.129252805, 0.0012, 0.183675248, 0.0012, 0.0012, 0.0012, 0.193279208],
                [0.0012, 0.0012, 0.0012, 0.154863366, 0.0012, 0.0012, 0.0012, 0.154863366, 0.0012, 0.097239604, 0.129252805, 0.24770165, 0.0012, 0.0012, 0.0012, 0.193279208],
                [0.161266007, 0.0012, 0.0012, 0.0012, 0.129252805, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.164467327, 0.174071287, 0.174071287, 0.174071287],
                [0.0012, 0.161266007, 0.0012, 0.0012, 0.0012, 0.129252805, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.183675248, 0.308526733, 0.193279208],
                [0.0012, 0.0012, 0.161266007, 0.0012, 0.0012, 0.0012, 0.129252805, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.154863366, 0.154863366, 0.183675248, 0.193279208],
                [0.161266007, 0.0012, 0.0012, 0.0012, 0.0012, 0.129252805, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.683081188],
                [0.0012, 0.097239604, 0.065226403, 0.0012, 0.0012, 0.0012, 0.065226403, 0.065226403, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.683081188],
                [0.0012, 0.0012, 0.0012, 0.0012, 0.097239604, 0.0012, 0.0012, 0.0012, 0.129252805, 0.0012, 0.0012, 0.0012, 0.228493729, 0.174071287, 0.174071287, 0.174071287],
                [0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.097239604, 0.0012, 0.0012, 0.0012, 0.129252805, 0.0012, 0.0012, 0.0012, 0.24770165, 0.308526733, 0.193279208],
                [0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.097239604, 0.0012, 0.0012, 0.0012, 0.129252805, 0.0012, 0.154863366, 0.154863366, 0.24770165, 0.193279208],
                [0.0012, 0.0012, 0.0012, 0.0012, 0.097239604, 0.0012, 0.0012, 0.0012, 0.065226403, 0.065226403, 0.0012, 0.0012, 0.0012, 0.065226403, 0.0012, 0.683081188],
                [0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.097239604, 0.0012, 0.0012, 0.0012, 0.0012, 0.129252805, 0.0012, 0.0012, 0.0012, 0.0012, 0.747107591],
            ]).reshape([5,5,4,4])
        },
    ],

])
def test_run_sca(
    fa_fpath, symmap, 
    gap_truncation_thresh,
    sequence_gap_thresh,
    sequence_similarity_thresh,
    reference_id,
    reference_similarity_thresh, 
    position_gap_thresh,
    background_map,
    regularization,
    expected_results,
):
    
    # Equal background probability distribution if background_map is None
    if background_map is None:
        background_map = {s: 1 / len(symmap.aa2int) for s in symmap.aa2int}
    
    msa_obj, msa_orig, msa_ids_orig = load_msa(
        fa_fpath, format="fasta", mapping=symmap,
    )

    results = preprocess_msa(
        msa_orig, msa_ids_orig, 
        mapping=symmap, 
        gap_truncation_thresh=gap_truncation_thresh,
        sequence_gap_thresh=sequence_gap_thresh,
        reference_id=reference_id,
        reference_similarity_thresh=reference_similarity_thresh,
        sequence_similarity_thresh=sequence_similarity_thresh,
        position_gap_thresh=position_gap_thresh,
        verbosity=2
    )

    msa, xmsa, seqids, weights, ret_seqs, ret_pos, _ = results

    sca_res = run_sca(
        xmsa, weights, background_map,
        mapping=symmap,
        regularization=regularization,
        return_keys="all",
        pbar=False,
    )

    errors = []
    for key in expected_results:
        if not np.allclose(expected_results[key], sca_res[key]):
            msg = f"Mismatch in {key}\n"
            msg += f"Expected: {expected_results[key]}\n"
            msg += f"     Got: {sca_res[key]}\n"
            errors.append(msg)
    assert not errors, "Errors occurred:\n{}".format("\n".join(errors))
